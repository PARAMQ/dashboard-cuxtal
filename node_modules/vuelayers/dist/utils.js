/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.12.7
 * @license MIT
 * @copyright (c) 2017-2023, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import { Collection } from 'ol';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import baseMergeDescriptors from 'merge-descriptors';
import { interval, throwError, race, NEVER } from 'rxjs';
import { skipWhile, skipUntil, first, switchMap, timeout, catchError } from 'rxjs/operators';

var _context;
/**
 * Mini Lodash.
 */

const glob = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : {};
const globIsFinite = glob.isFinite || noop;
const objectProto = Object.prototype;
const funcProto = Object.prototype;
const objectToString = objectProto.toString;
const objectHasOwnProp = objectProto.hasOwnProperty;
const funcToString = funcProto.toString;
const objectTag = /*#__PURE__*/(_context = {}, objectToString).call(_context);
const numberTag = /*#__PURE__*/(_context = 0, objectToString).call(_context);
const stringTag = /*#__PURE__*/(_context = '', objectToString).call(_context);
const booleanTag = /*#__PURE__*/(_context = true, objectToString).call(_context);
const objectCtorString = /*#__PURE__*/funcToString.call(Object);
function noop() {// do nothing
}
function constant(value) {
  return () => value;
}
function stubArray() {
  return [];
}
function stubObject() {
  return Object.create(null);
}
function stubCollection() {
  return new Collection();
}
function stubTrue() {
  return true;
}
function stubFalse() {
  return false;
}
function identity(value) {
  return value;
}
function negate(func) {
  return function () {
    return !func(...arguments);
  };
}
function or() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return reduce(funcs, (result, fn) => {
      return result || fn(...args);
    }, false);
  };
}
function and() {
  for (var _len3 = arguments.length, funcs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    funcs[_key3] = arguments[_key3];
  }

  return function () {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return reduce(funcs, (result, fn) => {
      return result && fn(...args);
    }, true);
  };
}
function toArray(value) {
  return Array.from(value);
}
function isBoolean(value) {
  return objectToString.call(value) === booleanTag;
}
function isNumber(value) {
  return objectToString.call(value) === numberTag;
}
function isString(value) {
  return objectToString.call(value) === stringTag;
}
function isArray(value) {
  return Array.isArray(value);
}
function isArrayLike(value) {
  return isObjectLike(value) && objectHasOwnProp.call(value, 'length');
}
function isCollection(value) {
  return value instanceof Collection;
}
function isFinite(value) {
  return typeof value === 'number' && globIsFinite(value);
}
function isFunction(value) {
  return typeof value === 'function';
}
/**
 * @param {*} value
 * @return {boolean} True if value is number or numeric string.
 */

function isNumeric(value) {
  return !isNaN(parseFloat(value)) && globIsFinite(value);
}
function isObjectLike(value) {
  return value != null && typeof value === 'object';
}
function isPlainObject(value) {
  if (!isObjectLike(value) || objectToString.call(value) !== objectTag) {
    return false;
  }

  const proto = Object.getPrototypeOf(value);

  if (proto == null) {
    return true;
  }

  const Ctor = proto.constructor;
  return typeof Ctor === 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) === objectCtorString;
}
function round(number) {
  let precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  if (!globIsFinite(number)) return number;
  if (precision < 0) return Number(number);
  return Number(Number(number).toFixed(precision));
}
/**
 * @param {...*} [args]
 *
 * @return {*}
 */

function coalesce() {
  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }

  return args.find(val => val != null);
}
/**
 * @param {Object} object
 * @return {Object} Returns object only with plain properties.
 */

function plainProps(object) {
  const newObject = {};

  const isPlain = x => isNumeric(x) || isString(x) || isArray(x) || isBoolean(x) || isPlainObject(x);

  Object.keys(object).forEach(key => {
    if (isPlain(object[key])) {
      newObject[key] = object[key];
    }
  });
  return newObject;
}
/**
 * Replaces `tokens` in the `string` by values from the `replaces`.
 *
 * @param {string} string
 * @param {Object} replaces
 *
 * @returns {string}
 */

function replaceTokens(string, replaces) {
  const regExp = new RegExp(Object.keys(replaces).map(field => '(\\{' + field + '\\})').join('|'), 'ig');
  return string.replace(regExp, match => replaces[match.substr(1, match.length - 2)] || '');
}
function isEqual(value, other) {
  if (value === other) {
    return true;
  }

  if (value == null || other == null || !(isObjectLike(value) && isObjectLike(other))) {
    // eslint-disable-next-line no-self-compare
    return value !== value && other !== other;
  }

  const valueProps = Object.keys(value);
  const otherProps = Object.keys(other);

  if (valueProps.length !== otherProps.length) {
    return false;
  } // if (serialize(value) === serialize(other)) return


  const checked = [];

  const traverse = (valueProps, otherProps) => {
    for (let i = 0, l = valueProps.length; i < l; i++) {
      const valueProp = valueProps[i];

      if (checked.includes(valueProp)) {
        continue;
      }

      if (objectHasOwnProp.call(other, valueProp) === false) {
        return false;
      }

      const otherProp = otherProps[i];

      if (!isEqual(value[valueProp], other[otherProp])) {
        return false;
      }

      checked.push(otherProp);
    }

    return true;
  };

  if (traverse(valueProps, otherProps) === false) {
    return false;
  }

  return traverse(otherProps, valueProps);
}
function getLength(value) {
  if (isCollection(value)) {
    value = value.getArray();
  }

  if (isArrayLike(value)) {
    return value.length;
  }

  return 0;
}
function isEmpty(value) {
  if (isCollection(value)) {
    value = value.getArray();
  }

  if (isObjectLike(value)) {
    value = Object.values(value).filter(negate(isEmpty));
  }

  return !value || isArrayLike(value) && getLength(value) === 0;
}
function keys(object) {
  return Object.keys(object);
}
function values(object) {
  return Object.values(object);
}
function seal(object) {
  return Object.seal(object);
}
function freeze(object) {
  return Object.freeze(object);
}
function sealFactory(factory) {
  let fn = factory;

  if (!fn.sealed) {
    fn = function () {
      return seal(factory(...arguments));
    };

    fn.sealed = true;
  }

  return fn;
}
function freezeFactory(factory) {
  let fn = factory;

  if (!fn.freezed) {
    fn = function () {
      return freeze(factory(...arguments));
    };

    fn.freezed = true;
  }

  return fn;
}
function forEach(collection, iteratee) {
  if (isCollection(collection)) {
    collection = collection.getArray();
  }

  const keys = Object.keys(collection);

  for (let i = 0, l = keys.length; i < l; i++) {
    const key = keys[i];
    const value = collection[key];

    if (iteratee(value, key) === false) {
      return;
    }
  }
}
function reduce(collection, iteratee, initial) {
  let result = initial;
  forEach(collection, (value, key) => {
    result = iteratee(result, value, key);
  });
  return result;
}
function filter(collection) {
  let iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : negate(isEmpty);
  return reduce(collection, (newCollection, value, key) => {
    if (iteratee(value, key)) {
      if (isArray(newCollection)) {
        newCollection.push(value);
      } else {
        newCollection[key] = value;
      }
    }

    return newCollection;
  }, isArrayLike(collection) || isCollection(collection) ? [] : {});
}
function find(collection) {
  let iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
  const res = filter(collection, iteratee);
  if (isArray(res)) return res[0];
  return res[keys(res)[0]];
}
function map(collection) {
  let iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
  return reduce(collection, (newCollection, value, key) => {
    newCollection[key] = iteratee(value, key);
    return newCollection;
  }, isArrayLike(collection) || isCollection(collection) ? [] : {});
}
function mapValues(object) {
  let iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
  return map(object, iteratee);
}
function mapKeys(object) {
  let iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
  return reduce(object, (newObject, value, key) => {
    newObject[iteratee(value, key)] = value;
    return newObject;
  }, isArrayLike(object) || isCollection(object) ? [] : {});
}
function every(collection) {
  let iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
  return reduce(collection, (result, value, key) => {
    return result && iteratee(value, key);
  }, true);
}
function some(collection) {
  let iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
  return reduce(collection, (result, value, key) => {
    return result || iteratee(value, key);
  }, false);
}
function firstEl(object) {
  if (isCollection(object)) {
    object = object.getArray();
  }

  if (!isArrayLike(object)) return;
  return object[0];
}
function lastEl(object) {
  if (isCollection(object)) {
    object = object.getArray();
  }

  if (!isArrayLike(object)) return;
  return object[object.length - 1];
}
function pick(object, key) {
  for (var _len6 = arguments.length, keys = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
    keys[_key6 - 2] = arguments[_key6];
  }

  if (Array.isArray(key)) {
    keys = key;
  } else {
    keys = [key].concat(keys);
  }

  return reduce(keys, (picked, key) => {
    picked[key] = object[key];
    return picked;
  }, {});
}
function omit(object, key) {
  for (var _len7 = arguments.length, keys = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {
    keys[_key7 - 2] = arguments[_key7];
  }

  if (Array.isArray(key)) {
    keys = key;
  } else {
    keys = [key].concat(keys);
  }

  return filter(object, (value, key) => !keys.includes(key));
}
function upperFirst(string) {
  string = String(string);

  if (string.length === 0) {
    return '';
  }

  return string[0].toUpperCase() + string.slice(1);
}
function lowerFirst(string) {
  string = String(string);

  if (string.length === 0) {
    return '';
  }

  return string[0].toLowerCase() + string.slice(1);
}
function* rangeIterator(start, end) {
  let step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  for (let i = start; i < end; i += step) {
    yield i;
  }
}
function range(start, end) {
  let step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  return Array.from(rangeIterator(start, end, step));
}
/**
 * https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_get
 *
 * @param obj
 * @param path
 * @param defaultValue
 * @return {*}
 */

function get(obj, path, defaultValue) {
  const travel = regexp => String.prototype.split.call(path, regexp).filter(Boolean).reduce((res, key) => res !== null && res !== undefined ? res[key] : res, obj);

  const result = travel(/[,[\]]+?/) || travel(/[,[\].]+?/);
  return result === undefined || result === obj ? defaultValue : result;
}
function hasOwnProp(object, prop) {
  return isObjectLike(object) && objectHasOwnProp.call(object, prop);
}
function hasProp(object, prop) {
  return isObjectLike(object) && prop in object;
}
function includes(array, value) {
  let comparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : isEqual;
  let found = false;
  forEach(array, elem => {
    found = comparator(elem, value);
    if (found) return false;
  });
  return found;
}
function difference(array1, array2) {
  let comparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : isEqual;
  return filter(array1, value => !includes(array2, value, comparator));
}
/**
 * @param {string} str
 * @return {string}
 */

function camelCase(str) {
  const regExp = /([-_]\w)/g;
  return str.replace(regExp, matches => matches[1].toUpperCase());
}
/**
 * @param {string} str
 * @returns {string}
 */

function kebabCase(str) {
  return str.match(/[A-Z]{2,}(?=[A-Z][a-z0-9]*|\b)|[A-Z]?[a-z0-9]*|[A-Z]|[0-9]+/g).filter(Boolean).map(x => x.toLowerCase()).join('-');
}
function serialize(value) {
  return JSON.stringify(value);
}
function unserialize(value) {
  if (!isString(value)) return;
  return JSON.parse(value);
}
function clonePlainObject(obj) {
  return unserialize(serialize(obj));
}
function addPrefix(prefix) {
  return str => prefix + (prefix ? upperFirst(str) : str);
}

class AssertionError extends Error {
  constructor(message) {
    super(message);
    this.name = this.constructor.name;

    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error(message).stack;
    }
  }

}
/**
 * @param {*} value
 * @param {string} message
 * @throws AssertionError
 */

function assert(value, message) {
  if (!value) {
    throw new AssertionError(message || 'Assertion failed');
  }
}
/**
 * @param {*} value
 * @param {string|undefined} [msg]
 * @throws {AssertionError}
 */

function numeric(value, msg) {
  assert(isNumeric(value), msg || 'value is a number');
}
/**
 * @param {*} value
 * @param {Function} Ctor
 * @param {string|undefined} [msg]
 * @throws {AssertionError}
 */

function instanceOf(value, Ctor, msg) {
  assert(value instanceof Ctor, msg || `value is an instance of ${Ctor.name}`);
}

/**
 * Simple Identity map with refs count
 */
class IdentityMap {
  constructor() {
    _defineProperty(this, "_pools", Object.create(null));
  }

  /**
   * @param {string} pool
   * @private
   */
  _preparePool(pool) {
    this._pools[pool] || (this._pools[pool] = Object.create(null));
  }
  /**
   * @param {string} id
   * @param {*} value
   * @param {string} pool
   */


  set(id, value) {
    let pool = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';
    if (value == null) return;

    this._preparePool(pool);

    this._pools[pool][id] = {
      value,
      refs: 1
    };
  }
  /**
   * @param {string} id
   * @param {string} pool
   */


  get(id) {
    let pool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

    this._preparePool(pool);

    const rec = this._pools[pool][id];
    if (!rec || rec.value == null) return;
    rec.refs++;
    this._pools[pool][id] = rec;
    return rec.value;
  }
  /**
   * @param {string} id
   * @param {string} pool
   */


  unset(id) {
    let pool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

    this._preparePool(pool);

    const rec = this._pools[pool][id];
    if (!rec || rec.value == null) return;
    rec.refs--;

    if (rec.refs === 0) {
      delete this._pools[pool][id];
    }
  }
  /**
   * @param {string} id
   * @param {string} pool
   * @return {boolean}
   */


  has(id) {
    let pool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

    this._preparePool(pool);

    return !!this._pools[pool][id];
  }
  /**
   * @param {string} fromId
   * @param {string} toId
   * @param {string} [pool]
   * @returns {boolean}
   */


  move(fromId, toId) {
    let pool = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';
    if (!this.has(fromId, pool) || !toId) return false;
    this._pools[pool][toId] = this._pools[pool][fromId];
    delete this._pools[pool][fromId];
    return true;
  }
  /**
   * @param {string} pool
   * @return {string[]}
   */


  ids() {
    let pool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

    this._preparePool(pool);

    return Object.keys(this._pools[pool]);
  }
  /**
   * @param {string} id
   * @param {string} pool
   * @return {*}
   */


  refs(id) {
    let pool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

    this._preparePool(pool);

    return this.has(id, pool) ? this._pools[pool][id].refs : undefined;
  }

}

/* eslint-disable no-console */

const log = makeLog('[VueLayers]');
const warn = makeWarn('[VueLayers] WARN');
const error = makeError('[VueLayers] ERR');
/* eslint-enable no-console */

function encode(val) {
  return JSON.stringify(val);
}
function newLogger() {
  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return {
    log: makeLog(`[VueLayers] ${prefix}`),
    warn: makeWarn(`[VueLayers] WARN ${prefix}`),
    error: makeError(`[VueLayers] ERR ${prefix}`)
  };
}
function makeLog() {
  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (prefix) {
      if (isString(args[0])) {
        args[0] = prefix.trim() + ' ' + args[0];
      } else {
        args = [prefix.trim(), ...args];
      }
    }

    console.log(...args);
  };
}
function makeWarn() {
  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (prefix) {
      if (isString(args[0])) {
        args[0] = prefix.trim() + ' ' + args[0];
      } else {
        args = [prefix.trim(), ...args];
      }
    }

    console.warn(...args);
  };
}
function makeError() {
  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    if (prefix) {
      if (isString(args[0])) {
        args[0] = prefix.trim() + ' ' + args[0];
      } else {
        args = [prefix.trim(), ...args];
      }
    }

    console.error(...args);
  };
}

function sequential (fn) {
  return async function () {
    if (fn._execPromise) {
      await fn._execPromise;
    }

    fn._execPromise = Promise.resolve(fn.call(this, ...arguments));
    const res = await fn._execPromise;
    delete fn._execPromise;
    return res;
  };
}

/**
 * @param {...Object} args
 * @returns {Object}
 */

function mergeDescriptors() {
  let redefine;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (typeof args[args.length - 1] !== 'object') {
    redefine = args.pop();
  }

  return args.slice(1).reduce((dest, src, i) => baseMergeDescriptors(dest, src, redefine), args[0]);
}

/**
 * Constructs watch hash for multiple properties.
 * @param {string[]} props
 * @param {function|Object} watcherFactory
 */

function makeWatchers(props, watcherFactory) {
  return props.reduce((hash, prop) => {
    hash[prop] = watcherFactory(prop);
    return hash;
  }, {});
}
function extractChildren(slots) {
  let slotNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return Object.keys(slots).reduce((all, name) => {
    if (!slotNames.length || slotNames.includes(name)) {
      all = all.concat(slots[name]);
    }

    return all;
  }, []);
}
function hasAncestorVm(vm, selector) {
  if (matchesVm(vm, selector)) {
    return true;
  }

  if (!vm.$parent) {
    return false;
  }

  return hasAncestorVm(vm.$parent, selector);
}
function matchesVm(vm, selector) {
  if (!selector) {
    return true;
  }

  if (isString(selector)) {
    return vm.$options.name === selector;
  }

  return selector === vm;
}

class WaitCancelError extends Error {
  constructor(message) {
    super(message);

    _defineProperty(this, "name", 'WaitCancelError');

    if (isFunction(Error.captureStackTrace)) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error(message).stack;
    }
  }

}
class WaitTimeoutError extends Error {
  constructor(message) {
    super(message);

    _defineProperty(this, "name", 'WaitTimeoutError');

    if (isFunction(Error.captureStackTrace)) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error(message).stack;
    }
  }

}
/**
 * @param {function|Observable} condition
 * @param {function|Observable} [breakOn]
 * @param {number} [timeout]
 * @returns {Promise<boolean>}
 */

function waitFor(condition, breakOn, timeout$1) {
  const defCond = x => !x;

  const success = interval(1000 / 60).pipe(isFunction(condition) ? skipWhile(negate(condition)) : skipUntil(condition.pipe(skipWhile(defCond))), first());
  let failed = NEVER;

  if (breakOn) {
    failed = interval(1000 / 60).pipe(isFunction(breakOn) ? skipWhile(negate(breakOn)) : skipUntil(breakOn.pipe(skipWhile(defCond))), first(), switchMap(() => throwError(new WaitCancelError('wait canceled'))));
  }

  let obs = race(success, failed);

  if (timeout$1 > 0) {
    obs = obs.pipe(timeout(timeout$1));
  }

  return obs.pipe(catchError(err => {
    if (err.name === 'TimeoutError') {
      err = new WaitTimeoutError('wait timed out');
    }

    throw err;
  })).toPromise();
}

export { AssertionError, IdentityMap, WaitCancelError, WaitTimeoutError, addPrefix, and, assert, camelCase, clonePlainObject, coalesce, constant, difference, encode, error, every, extractChildren, filter, find, firstEl, forEach, freeze, freezeFactory, get, getLength, hasAncestorVm, hasOwnProp, hasProp, identity, includes, instanceOf, isArray, isArrayLike, isBoolean, isCollection, isEmpty, isEqual, isFinite, isFunction, isNumber, isNumeric, isObjectLike, isPlainObject, isString, kebabCase, keys, lastEl, log, lowerFirst, makeError, makeLog, makeWarn, makeWatchers, map, mapKeys, mapValues, matchesVm, mergeDescriptors, negate, newLogger, noop, numeric, omit, or, pick, plainProps, range, rangeIterator, reduce, replaceTokens, round, seal, sealFactory, sequential, serialize, some, stubArray, stubCollection, stubFalse, stubObject, stubTrue, toArray, unserialize, upperFirst, values, waitFor, warn };
//# sourceMappingURL=utils.js.map
